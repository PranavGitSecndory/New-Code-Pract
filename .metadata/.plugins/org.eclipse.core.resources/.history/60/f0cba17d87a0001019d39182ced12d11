package com.collection;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.StringTokenizer;


class Employe {
    int id;
    String name;
    double basicSalary;
    double pf;
    double ctc;

    public Employe(int id, String name, double basicSalary) {
        this.id = id;
        this.name = name;
        this.basicSalary = basicSalary;
        this.pf = basicSalary * 0.12;
        this.ctc = basicSalary + pf;
    }

    @Override
    public String toString() {
        return id + "#" + name + "#" + basicSalary + "#" + pf + "#" + ctc;
    }
}

public class Task_2_3_oct {
    public static void main(String[] args) {
        ArrayList<Employe> employees = new ArrayList<>();

        FileReader fr = null;
        BufferedReader br = null;

        // Step 1: Read existing data
        try {
            fr = new FileReader("Task.txt");
            br = new BufferedReader(fr);

            String data;
            while ((data = br.readLine()) != null) 
            {
                StringTokenizer st = new StringTokenizer(data, "#");
                if (st.countTokens() >= 3) 
                {
                    int id = Integer.parseInt(st.nextToken());
                    String name = st.nextToken();
                    double basic = Double.parseDouble(st.nextToken());
                    employees.add(new Employe(id, name, basic));
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fr != null) fr.close();
                if (br != null) br.close();
            } catch (IOException e2) {
                e2.printStackTrace();
            }
        }

   

        try (BufferedWriter bw = new BufferedWriter(new FileWriter("Task_data.txt"))) {
            System.out.println("ID\tName\tBasic\tPF\tCTC");
            for (Employe emp : employees) {
                // Write to file
                bw.write(emp.toString());
                bw.newLine();

                // Print to console
                System.out.println(emp.id + "\t" + emp.name + "\t" + emp.basicSalary + "\t" + emp.pf + "\t" + emp.ctc);
            }
            System.out.println("\nData successfully written to Task_data.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }
    
    

	
	
	//task 2 we can convert AL to LL 
	
//	ArrayList<String> ob=new ArrayList<>();
//	ob.add("Nick");
//	ob.add("sagar");
//	ob.add("ketan");
//	
//	LinkedList<String> ob1=new LinkedList<>(ob);
//	System.out.println("arraylist data ="+ob);
//	System.out.println("Linklist data ="+ob1);
	
	
	//Task 3  a, b,c collection call any one and prind all three collection data
	       
//	        ArrayList<String> A = new ArrayList<>();
//	        ArrayList<String> B = new ArrayList<>();
//	        ArrayList<String> C = new ArrayList<>();
//
//	        A.add("Don");
//	        A.add("surya");
//	        
//	        B.add("nikhil");
//	        B.add("pranv");
//
//	        C.add("ketan");
//	        C.add("Divesh");

//	        A.addAll(B);
//	        A.addAll(C);
//	        C.addAll(A);
//	        C.addAll(B);
//	        B.addAll(C);
//	        B.addAll(A);
//	        
//	        System.out.println("Collection a = " + A);
//	        System.out.println("Collection c = " + C);
//	        System.out.println("Collection b = " + B);
	   

//	Task 4  use add all method to prin in call one oject

//	ArrayList<String> ob = new ArrayList<>();
//    ArrayList<String> ob1= new ArrayList<>();
//    
//    ob.add("Don");
//    ob.add("surya");
//    
//    ob1.add("nikhil");
//    ob1.add("pranv");
//    
//    ob1.addAll(ob);
//    System.out.println("All in one object calling = "+ob1);
    

}	

}
